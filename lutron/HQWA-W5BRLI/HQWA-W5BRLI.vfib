{"name":"HQWA-W5BRLI","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"","visible":"true","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"(1)","name":"Button11","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_1 .. ',3'\nbtnCmdDescription = 'button 1 press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"(2)","name":"Button21","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_2 .. ',3'\nbtnCmdDescription = 'button 2 press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"(3)","name":"Button31","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_3 .. ',3'\nbtnCmdDescription = 'button 3 press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"(4)","name":"Button41","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_4 .. ',3'\nbtnCmdDescription = 'button 4 press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"(5)","name":"Button51","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_5 .. ',3'\nbtnCmdDescription = 'button 5 press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"(down)","name":"Button61","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_18 .. ',3'\nbtnCmdDescription = 'button down press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"(up)","name":"Button62","empty":false,"msg":"--[[\n    @Global Variable: \n        gLu_D_Cmd: command to be sent for Lutron QS\n        gLu_D_State: true (activate) or false (deactivate)\n        gLu_D_Meta: json data storage for Lutron devices status\n        gLu_D_Stop: true (stop daemon) or false (start daemon)\n--]]\n\n-- lutron integration ID\nDEV_INTEG_ID = 11                   \n\n-- component number\nCOMPONENT_NUM_BTN_1 = 1             \nCOMPONENT_NUM_BTN_2 = 2             \nCOMPONENT_NUM_BTN_3 = 3             \nCOMPONENT_NUM_BTN_4 = 4             \nCOMPONENT_NUM_BTN_5 = 5             \nCOMPONENT_NUM_BTN_18 = 18           \nCOMPONENT_NUM_BTN_19 = 19           \n\n-- vdev config\nbtnCmd = '#device,' .. DEV_INTEG_ID .. ',' .. COMPONENT_NUM_BTN_19 .. ',3'\nbtnCmdDescription = 'button up press'\n\n-- global variable in used\nG_VAR_NAME_META = 'gLu_D_Meta'\nG_VAR_NAME_STATE = 'gLu_D_State'\nG_VAR_NAME_CMD = 'gLu_D_Cmd'\nG_VAR_NAME_STOP = 'gLu_D_Stop'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(btnCmdDescription, _INFO)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal wait_cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n-- check if cmd wait\nif wait_cmd ~= '' and wait_cmd ~= nil then\n    Trace('wait command exist: ' .. wait_cmd, _WARNING)\n    fibaro:log('busy, try later')\nelse\n    fibaro:setGlobal(G_VAR_NAME_CMD,btnCmd)\n    Trace('set cmd: ' .. btnCmd)\n    fibaro:log(btnCmdDescription)\nend\n","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}