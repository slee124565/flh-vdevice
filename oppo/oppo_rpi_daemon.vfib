{"name":"(oppo_rpi_daemon)","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"","ui.err.value":"sck conn err","ui.lastcmd.value":"#POWON ","ui.status.value":"STOP","ui.stopflag.value":"0","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Status","name":"status","favourite":false,"main":true}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"(Start)","name":"button_1_1","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_PARM_CMD = 'gOppo_D_PCmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \nG_VAR_LIST = {G_VAR_NAME_META,\n    G_VAR_NAME_STATE,\n    G_VAR_NAME_CMD,\n    G_VAR_NAME_PARM_CMD,\n    G_VAR_NAME_STOP,\n    G_VAR_NAME_WD_STOP\n    }\n\nVDEV_NAME = 'oppo-rpi'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(VDEV_NAME .. ' daemon enter', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nTrace('check daemon state ' .. fibaro:getGlobal(G_VAR_NAME_STATE))\nif (fibaro:getGlobal(G_VAR_NAME_STATE) == 'BUSY') then\n    fibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , 'State Busy' )\n    Trace(VDEV_NAME .. ' daemon strat process exit')\n    return\nend\n\nfibaro:setGlobal(G_VAR_NAME_STOP, '')\nTrace('reset daemon stop flag ' .. fibaro:getGlobal(G_VAR_NAME_STOP))\nfibaro:call( selfID , \"setProperty\" , \"ui.stopflag.value\" , false )\n\nfibaro:setGlobal(G_VAR_NAME_CMD, '')\nfibaro:setGlobal(G_VAR_NAME_PARM_CMD, '')\nTrace('reset daemon cmd queue ' .. fibaro:getGlobal(G_VAR_NAME_STOP))\nfibaro:call( selfID , \"setProperty\" , \"ui.lastcmd.value\" , '' )\n\nfibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , '' )\n\n--fibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , '' )\n--fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'Starting' )\n--fibaro:call( selfID , \"setProperty\" , \"ui.lastcmd.value\" , '' )\n\nfunction remote_device_data_handler(_data)\n    Trace('_data: ' .. _data)\nend\n\nfunction cmd_rev_fwd_handler(cmdCode)\n    local arg, CMD_KEY\n    local final_cmd_arg = ''\n    CMD_KEY = 'REV_FWD'\n    local cmdArgs = fibaro:getGlobal(G_VAR_NAME_PARM_CMD)\n    Trace('last cmdArgs: ' .. tostring(cmdArgs))\n    if cmdArgs == nil or cmdArgs == '' then\n        Trace('G_VAR_NAME_PARM_CMD is nil, initial it', _WARNING)\n        cmdArgs = {}\n        fibaro:setGlobal(G_VAR_NAME_PARM_CMD,json.encode(cmdArgs))\n        arg = 1\n        final_cmd_arg = cmdCode .. tostring(arg)\n    else\n        cmdArgs = json.decode(cmdArgs)\n        local last_cmd_arg = cmdArgs[CMD_KEY]\n\n        Trace('last_cmd_arg: ' .. tostring(last_cmd_arg))\n        if last_cmd_arg == nil or last_cmd_arg == '' then\n            Trace('set default arg value 1')\n            arg = 1\n            final_cmd_arg = cmdCode .. tostring(arg)\n        else\n            -- get last cmd ard\n            arg = tonumber(string.sub(last_cmd_arg,string.len(cmdCode)))\n            Trace('get previous cmd arg: ' .. tostring(arg))\n\n            -- get last cmd\n            if string.find(last_cmd_arg,'#REV') ~= nil then\n                Trace('last cmd is #REV')\n                if cmdCode == '#REV ' then\n                    arg = arg + 1\n                    if arg > 5 then\n                        arg = 5\n                    end\n                    final_cmd_arg = cmdCode .. tostring(arg)\n                else\n                    arg = arg - 1\n                    if arg < 1 then\n                        arg = 1\n                        final_cmd_arg = '#FWD 1'\n                    else\n                        final_cmd_arg = '#REV ' .. tostring(arg)\n                    end\n                end\n            else\n                Trace('last cmd is #FWD')\n                if cmdCode == '#FWD ' then\n                    arg = arg + 1\n                    if arg > 5 then\n                        arg = 5\n                    end\n                    final_cmd_arg = cmdCode .. tostring(arg)\n                else\n                    arg = arg - 1\n                    if arg < 1 then\n                        arg = 1\n                        final_cmd_arg = '#REV 1'\n                    else\n                        final_cmd_arg = '#FWD ' .. tostring(arg)\n                    end\n                end\n            end\n        end\n    end\n    Trace('final_cmd_arg: ' .. final_cmd_arg)\n    cmdArgs[CMD_KEY] = final_cmd_arg\n    fibaro:setGlobal(G_VAR_NAME_PARM_CMD, json.encode(cmdArgs))\n    Trace('update cmdArgs: ' .. json.encode(cmdArgs))\n    return final_cmd_arg\nend\n\nfunction check_cmd_param(cmdCode)\n    Trace('check_cmd_param with \"' .. cmdCode .. '\",len: ' .. tostring(string.len(cmdCode)))\n\n    -- add cmd param if needed\n    if cmdCode == '#REV ' or cmdCode == '#FWD ' then\n        return cmd_rev_fwd_handler(cmdCode)\n    else \n        Trace('no cmd arg need to check and reset PARM_CMD')\n        cmdArgs = {}\n        fibaro:setGlobal(G_VAR_NAME_PARM_CMD,json.encode(cmdArgs))\n        return cmdCode\n    end\nend\n\nfunction service_run()\n\n    -- set vdev busy flag\n    fibaro:setGlobal(G_VAR_NAME_STATE, 'BUSY')\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'Starting' )\n    Trace('daemon start', _INFO)\n\n    -- setup socket connection\n    local socket\n    local status , err = pcall(\n        function() \n            socket = Net.FTcpSocket( ipAddress , tcpPort )\n            socket:setReadTimeout( 5000 )\n        end )  \n    if status ~= nil and status ~= true then\n        Trace( \"socket status: \" .. tostring( status or \"\" ) )\n    end  \n    if err ~= nil then\n        Trace( \"socket err: \" .. tostring( err or \"\" ), _ERROR )\n        fibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , 'SCK ERROR' )\n    else\n        -- control protocol process\n        local bytes, errCode, rdata\n        fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'oppo-rpi connected', _INFO )\n        Trace('oppo-rpi connected', _INFO)\n        while ( tostring(stopflag) ~= 'true' ) do\n            -- sck conn check process: make remote device must response data\n            bytes, errCode = socket:write('\\r')\n            Trace( 'socket write result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n\n            -- receive remote data process\n            fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'listening' )\n            local rcount = 0\n            local rmax = 10\n            local tmp = ''\n            rdata = ''\n            while rcount < rmax do\n                tmp, errCode = socket:read()\n                Trace('tmp: ' .. tostring(tmp))\n                rdata = rdata .. tmp\n                if errCode == 0 and string.len(rdata) > 0 then\n                    if string.sub(rdata,string.len(rdata),string.len(rdata)) == '\\n' then\n                        break\n                    else\n                        Trace('receive partial data ' .. tmp .. ' kepp reading...', _WARNING)\n                    end\n                end\n                if errCode ~= 0 then\n                    break\n                end\n                rcount = rcount + 1\n                fibaro:sleep(100)\n            end\n            Trace( 'socket read result code ' .. tostring(errCode) .. ' data: ' .. tostring(rdata) )\n            \n            -- socket conn broken if rcount >= rmax\n            if rcount >= rmax then\n                Trace('socket read no data exceed max count ' .. rmax, _ERROR )\n                fibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , 'sck conn err' )\n                break\n            end\n\n            -- filter conn check msg\n            if rdata ~= '' then\n                if logLevel == _DEBUG then\n                    local dhex\n                    if string.len(rdata) > 0 then\n                        dhex = 'len:' .. string.len(rdata) .. '=> ' .. string.sub(rdata,1,1) .. ':' .. string.byte(string.sub(rdata,1,1))\n                        if string.len(rdata) > 1 then\n                            for i = 2, string.len(rdata) do\n                                dhex = dhex .. ',' .. string.sub(rdata,i,i) .. ':' .. string.byte(string.sub(rdata,i,i))\n                            end\n                        end\n                        Trace( 'data hex: ' .. dhex )\n                    end\n                end\n                if rdata ~= '@OK\\n' then\n                    Trace('receive data: ' .. rdata, _INFO)\n                end\n            end\n\n            if errCode ~= 0 then\n                -- socket connection broken event, break loop; let watchdog restart daemon\n                Trace('connection broken', _WARNING)\n                break\n            end\n\n            -- read data processing\n            if rdata ~= '' then\n                remote_device_data_handler(rdata)\n            end\n\n            -- cmd handling\n            cmd = fibaro:getGlobal(G_VAR_NAME_CMD)\n            Trace('check cmd queue: ' .. tostring(cmd))\n            if cmd ~= '' and cmd ~= nil then\n                fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'execute cmd' )\n                fibaro:setGlobal(G_VAR_NAME_CMD, '')\n                Trace('clear cmd queue and handle cmd')\n                -- check cmd with cmd_parm\n                cmd = check_cmd_param(cmd)\n                Trace('process cmd: ' .. cmd .. ',len: ' .. tostring(string.len(cmd)), _INFO)\n                bytes, errCode = socket:write(cmd .. '\\r\\n')\n                Trace( 'socket write result code ' .. tostring(errCode) .. ' bytes: ' .. tostring(bytes) )\n                fibaro:call( selfID , \"setProperty\" , \"ui.lastcmd.value\" , cmd )\n            else\n                fibaro:sleep(300)\n            end\n\n            -- check daemon stop flag\n            stopflag = fibaro:getGlobal(G_VAR_NAME_STOP)\n            Trace('check stop flag ' .. tostring(stopflag))\n        end\n        \n        if errCode ~= 0 and errCode ~= SCK_READ_TIMEOUT_ERR_CODE then\n            fibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , 'sck err code ' .. tostring(errCode) )\n\n        end\n    end\n    \n    -- socket disconnect\n    socket:disconnect()\n    socket = nil\n    \n    \n    fibaro:setGlobal(G_VAR_NAME_STATE,'')\n    fibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , 'STOP' )\n    Trace('daemon exit', _INFO)\nend\n\nservice_run()\n\n\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"(Stop)","name":"Button21","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \n\nVDEV_NAME = 'oppo-rpi'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(VDEV_NAME .. ' daemon exit', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nTrace('current state:' .. fibaro:getGlobal(G_VAR_NAME_STATE) .. ' stop flag: ' .. fibaro:getGlobal(G_VAR_NAME_STOP))\nfibaro:setGlobal(G_VAR_NAME_STOP, 'true')\nlocal stopflag = fibaro:getGlobal(G_VAR_NAME_STOP)\nfibaro:call( selfID , \"setProperty\" , \"ui.stopflag.value\" , stopflag )\n\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"LastCmd","name":"lastcmd","favourite":false,"main":false}]},{"type":"label","elements":[{"id":5,"lua":false,"waitForResponse":false,"caption":"StopFlag","name":"stopflag","favourite":false,"main":false}]},{"type":"label","elements":[{"id":6,"lua":false,"waitForResponse":false,"caption":"ERR","name":"err","favourite":false,"main":false}]},{"type":"button","elements":[{"id":7,"lua":true,"waitForResponse":false,"caption":"ON/OFF","name":"Button51","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \n\nVDEV_NAME = 'oppo-rpi'\n\n-- device constant\nBTN_START_ID = 2\nBTN_STOP_ID = 3\n\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _INFO\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(VDEV_NAME .. ' daemon switch', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nlocal vdev_state = fibaro:getGlobal(G_VAR_NAME_STATE)\nTrace('current state is ' .. vdev_state)\nif vdev_state == 'BUSY' then\n    fibaro:log('Stoping Daemon')\n    Trace('active daemon stop')\n    fibaro:call( selfID , \"pressButton\" , BTN_STOP_ID )\n    \nelse\n    fibaro:log('Starting Deamon')\n    Trace('activate datemon start')\n    fibaro:call( selfID , \"pressButton\" , BTN_START_ID )\nend\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":8,"lua":true,"waitForResponse":false,"caption":"(Reset)","name":"Button31","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_PARM_CMD = 'gOppo_D_PCmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \nG_VAR_LIST = {G_VAR_NAME_META,\n    G_VAR_NAME_STATE,\n    G_VAR_NAME_CMD,\n    G_VAR_NAME_PARM_CMD,\n    G_VAR_NAME_STOP,\n    G_VAR_NAME_WD_STOP\n    }\n\nVDEV_NAME = 'oppo-rpi'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(VDEV_NAME .. ' daemon exit', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\n--fibaro:setGlobal(G_VAR_NAME_META, '')\n--fibaro:setGlobal(G_VAR_NAME_STATE, '')\n--fibaro:setGlobal(G_VAR_NAME_CMD, '')\n--fibaro:setGlobal(G_VAR_NAME_STOP, 'true')\nfor _,vName in pairs(G_VAR_LIST) do\n    if vName == G_VAR_NAME_STOP then\n        fibaro:setGlobal(vName, 'true')\n    elseif vName ~= G_VAR_NAME_META then\n        fibaro:setGlobal(vName, '')\n    end\nend\n    \n\nfibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.lastcmd.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.stopflag.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , '' )\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":9,"lua":true,"waitForResponse":false,"caption":"(Reset + Meta)","name":"Button41","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_PARM_CMD = 'gOppo_D_PCmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \nG_VAR_LIST = {G_VAR_NAME_META,\n    G_VAR_NAME_STATE,\n    G_VAR_NAME_CMD,\n    G_VAR_NAME_PARM_CMD,\n    G_VAR_NAME_STOP,\n    G_VAR_NAME_WD_STOP\n    }\n\nVDEV_NAME = 'oppo-rpi'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace(VDEV_NAME .. ' daemon exit', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\n--fibaro:setGlobal(G_VAR_NAME_META, '')\n--fibaro:setGlobal(G_VAR_NAME_STATE, '')\n--fibaro:setGlobal(G_VAR_NAME_CMD, '')\n--fibaro:setGlobal(G_VAR_NAME_STOP, 'true')\nfor _,vName in pairs(G_VAR_LIST) do\n    if vName == G_VAR_NAME_STOP then\n        fibaro:setGlobal(vName, 'true')\n    else\n        fibaro:setGlobal(vName, '')\n    end\nend\n    \n\nfibaro:call( selfID , \"setProperty\" , \"ui.status.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.lastcmd.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.stopflag.value\" , '' )\nfibaro:call( selfID , \"setProperty\" , \"ui.err.value\" , '' )\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":10,"lua":true,"waitForResponse":false,"caption":"Stop WatchDog","name":"Button61","empty":false,"msg":"--[[\n    @Global Variable: \n        gOppo_D_Cmd: command to be sent for RPI on OPPO\n        gOppo_D_State: true (activate) or false (deactivate)\n        gOppo_D_Meta: json data storage for OPPO devices status\n        gOppo_D_Stop: true (stop daemon) or false (daemon keep going)\n        gLu_WD_Stop: true (stop watchdog) or false (watch keep going)\n--]]\n\n-- global variable in used\nG_VAR_NAME_META = 'gOppo_D_Meta'\nG_VAR_NAME_STATE = 'gOppo_D_State'\nG_VAR_NAME_CMD = 'gOppo_D_Cmd'\nG_VAR_NAME_STOP = 'gOppo_D_Stop'\nG_VAR_NAME_WD_STOP = 'gOppo_WD_Stop'     -- Watch Dog Stop Flag \n\nVDEV_NAME = 'oppo-rpi'\n\n-- debug function declare\n_DEBUG = 10\n_INFO = 20\n_WARNING = 30\n_ERROR = 40\nlogLevel = _DEBUG\n\nfunction Trace( _text , _weight )\n    _weight = _weight or _DEBUG\n  \tif _weight == _INFO then\n    \t_color = 'white'\n    elseif _weight >= _WARNING then\n    \t_color = 'red'\n    else\n    \t_color = \"gray\"\n    end\n    if _weight >= logLevel then\n        fibaro:debug( '<span style=\"color:' .. _color .. '\">' .. tostring( _text ) .. '</span><p>' )\n    end\nend\n\nTrace('lutron watch dog stop', _DEBUG)\n\n-- variable initial\nlocal selfID = fibaro:getSelfId()\nlocal ipAddress = fibaro:getValue( selfID , \"IPAddress\" )\nlocal tcpPort = fibaro:getValue( selfID , \"TCPPort\" )\nTrace('Socket Server IP: ' .. ipAddress .. ' listen port: ' .. tcpPort)\n\nTrace('current watchdog stop flag:' .. tostring(fibaro:getGlobal(G_VAR_NAME_WD_STOP)))\nfibaro:setGlobal(G_VAR_NAME_WD_STOP, 'true')\nfibaro:log('stop watch dog')\n","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}